// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  Client
  Freelancer
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  lastName              String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  UserRole               @default(Freelancer)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  profile               FreelancerProfile[]
  clientProfile         ClientProfile[]
  conversationIds       String[]               @db.ObjectId
  conversations         Conversation[]         @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model FreelancerProfile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId          String   @db.ObjectId
  country         String?
  street          String?
  city            String?
  contact         String?
  state           String?
  zip             String?
  hourlyrate      String?
  estimatedamount String?
  message         String
  program         String
  profession      String
  language        String
  experiencefile  String?
  educationfile   String?
  imageInput      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model ClientProfile {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  country   String?
  Jobs      Job[]
  Proposals Proposal[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Job {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  post            String?
  projectSize     String?
  duration        String?
  expertise       String
  from            String
  to              String
  fixed           String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  jobDescription  String?
  clientProfile   ClientProfile  @relation(fields: [clientProfileId], references: [id])
  clientProfileId String         @db.ObjectId
  SkillsOnJobs    SkillsOnJobs[]
  status          JobStatus      @default(posted)
  proposals       Proposal[]
}

enum JobStatus {
  posted
  draft
}

model Proposal {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  duration        String?
  hourlyRate      String?
  coverLetter     String?
  userId          String         @db.ObjectId
  jobId           String         @db.ObjectId
  image           String
  estimatedAmount String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          ProposalStatus
  job             Job            @relation(fields: [jobId], references: [id])
  clientProfile   ClientProfile  @relation(fields: [clientProfileId], references: [id])
  clientProfileId String         @db.ObjectId
}

enum ProposalStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model SkillsOnJobs {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  skill   Skills @relation(fields: [skillId], references: [id])
  skillId String @db.ObjectId
  job     Job    @relation(fields: [jobId], references: [id])
  jobId   String @db.ObjectId

  @@index([skillId, jobId])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  Skill     Skills[]
  updatedAt DateTime @updatedAt
}

model Skills {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String         @db.ObjectId
  SkillsOnJobs SkillsOnJobs[]
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
