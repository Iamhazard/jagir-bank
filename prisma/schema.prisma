// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  Client
  Freelancer
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  lastName              String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  UserRole               @default(Freelancer)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  profile               FreelancerProfile[]
  ratings               Rating[]
  clientProfile         ClientProfile[]
  proposal              Proposal[]
  conversationIds       String[]               @db.ObjectId
  conversations         Conversation[]         @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  messages       Message[]
  Profile        Profile[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model FreelancerProfile {
  id              String                          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String                          @db.ObjectId
  name            String
  state           String
  StreetAddress   String
  zip             String
  contact         String?
  hourlyrate      String?
  estimatedamount String?
  message         String
  profession      FreelancerProfileToProfession[]
  countries       FreelancerProfileToCountry[]
  skills          FreelancerProfileToSkill[]
  language        String
  imageInput      String?
  createdAt       DateTime                        @default(now())
  updatedAt       DateTime                        @updatedAt
  user            User                            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model FreelancerProfileToCountry {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  freelancerProfileId String            @db.ObjectId
  countryId           String            @db.ObjectId
  cityId              String            @db.ObjectId
  freelancerProfile   FreelancerProfile @relation(fields: [freelancerProfileId], references: [id])
  country             Country           @relation(fields: [countryId], references: [id])
  city                City              @relation(fields: [cityId], references: [id])

  @@index([freelancerProfileId, countryId], name: "unique_freelancer_profile_country")
}

model FreelancerProfileToProfession {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  freelancerProfileId String            @db.ObjectId
  professionId        String            @db.ObjectId
  freelancerProfile   FreelancerProfile @relation(fields: [freelancerProfileId], references: [id])
  profession          Profession        @relation(fields: [professionId], references: [id])

  @@index([freelancerProfileId, professionId], name: "unique_freelancer_profile_profession")
}

model FreelancerProfileToSkill {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  freelancerProfileId String            @db.ObjectId
  skillId             String            @db.ObjectId
  freelancerProfile   FreelancerProfile @relation(fields: [freelancerProfileId], references: [id])
  skill               Skills            @relation(fields: [skillId], references: [id])

  @@index([freelancerProfileId, skillId], name: "unique_freelancer_profile_skill")
}

model Country {
  id        String                       @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  city      City[]
  countries FreelancerProfileToCountry[]
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
}

model City {
  id        String                       @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  cities    FreelancerProfileToCountry[]
  countryId String                       @db.ObjectId
  country   Country                      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
}

model ClientProfile {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  Jobs      Job[]
  proposal  Proposal[]
  country   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Job {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  post            String?
  projectSize     String?
  from            String?
  to              String?
  fixed           String?
  duration        String?
  jobDescription  String?
  clientProfile   ClientProfile  @relation(fields: [clientProfileId], references: [id])
  clientProfileId String         @db.ObjectId
  SkillsOnJobs    SkillsOnJobs[]
  status          JobStatus      @default(posted)
  proposals       Proposal[]
  jobType         String?
  education       String?
  organization    String?
  expertise       String?
  ratings         Rating[]
  jobView         JobView[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Category        Category?      @relation(fields: [categoryId], references: [id])
  categoryId      String?        @db.ObjectId
}

model JobView {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId      String   @db.ObjectId
  job        Job      @relation(fields: [jobId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  viewCount  Int      @default(0)
  createdAt  DateTime @default(now())
}

enum JobStatus {
  posted
  draft
}

model SkillsOnJobs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  skill     Skills   @relation(fields: [skillId], references: [id])
  skillId   String   @db.ObjectId
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([skillId, jobId])
}

model Category {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  createdAt   DateTime     @default(now())
  professions Profession[]
  jobs        Job[]
  visitor     JobView[]
  updatedAt   DateTime     @updatedAt
}

model Profession {
  id         String                          @id @default(auto()) @map("_id") @db.ObjectId
  profession String?
  category   Category                        @relation(fields: [categoryId], references: [id])
  categoryId String                          @db.ObjectId
  freelancer FreelancerProfileToProfession[]
  skills     Skills[]
  createdAt  DateTime                        @default(now())
  updatedAt  DateTime                        @updatedAt
}

model Skills {
  id           String                     @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  profiles     FreelancerProfileToSkill[]
  profession   Profession                 @relation(fields: [professionId], references: [id])
  professionId String                     @db.ObjectId
  SkillsOnJobs SkillsOnJobs[]
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  value     Int
  comment   String?
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Proposal {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  Profile         String
  duration        String?
  Coverletter     String?
  hourlyRate      String?
  estimatedAmount String?
  serviceFee      String
  image           String
  status          ProposalStatus @default(PENDING)
  job             Job            @relation(fields: [jobId], references: [id])
  jobId           String         @db.ObjectId
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  ClientProfile   ClientProfile? @relation(fields: [clientProfileId], references: [id])
  clientProfileId String?        @db.ObjectId
}

model Education {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String?
}

model OrganizationType {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  organization String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Experience {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  expertise String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProposalStatus {
  ACCEPTED
  REJECTED
  PENDING
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model language {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @unique @db.ObjectId
  userName   String?     @unique
  userImage  String?
  userBio    String?
  userSkills String?
  portfolio  Portfolio[]
  Education  String
  Language   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Portfolio {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  profile     Profile  @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  title       String
  Skills      String
  Role        String
  Description String
  photos      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
